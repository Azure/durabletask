trigger: none
pr: none

pool:
  name: '1ES-Hosted-DurableTaskFramework'
  demands:
    - ImageOverride -equals MMS2022TLS

steps:
# Start by restoring all the dependencies. This needs to be its own task
# from what I can tell. We specifically only target DurableTask.AzureStorage
# and its direct dependencies.
- task: DotNetCoreCLI@2
  displayName: 'Restore nuget dependencies'
  inputs:
    command: restore
    verbosityRestore: Minimal
    projects: |
      src/DurableTask.AzureStorage/DurableTask.AzureStorage.sln
      src/DurableTask.Emulator/DurableTask.Emulator.csproj
      src/DurableTask.ServiceBus/DurableTask.ServiceBus.csproj
      src/DurableTask.AzureServiceFabric/DurableTask.AzureServiceFabric.csproj

# Build the filtered solution in release mode, specifying the continuous integration flag.
- task: VSBuild@1
  displayName: 'Build (AzureStorage)'
  inputs:
    solution: 'src/DurableTask.AzureStorage/DurableTask.AzureStorage.sln'
    vsVersion: '16.0'
    logFileVerbosity: minimal
    configuration: Release
    msbuildArgs: /p:GITHUB_RUN_NUMBER=$(Build.BuildId) /p:ContinuousIntegrationBuild=true

- task: VSBuild@1
  displayName: 'Build (Emulator)'
  inputs:
    solution: 'src/DurableTask.Emulator/DurableTask.Emulator.csproj'
    vsVersion: '16.0'
    logFileVerbosity: minimal
    configuration: Release
    msbuildArgs: /p:GITHUB_RUN_NUMBER=$(Build.BuildId) /p:ContinuousIntegrationBuild=true

- task: VSBuild@1
  displayName: 'Build (ServiceBus)'
  inputs:
    solution: 'src/DurableTask.ServiceBus/DurableTask.ServiceBus.csproj'
    vsVersion: '16.0'
    logFileVerbosity: minimal
    configuration: Release
    msbuildArgs: /p:GITHUB_RUN_NUMBER=$(Build.BuildId) /p:ContinuousIntegrationBuild=true

- task: VSBuild@1
  displayName: 'Build (AzureServiceFabric)'
  inputs:
    solution: 'src/DurableTask.AzureServiceFabric/DurableTask.AzureServiceFabric.csproj'
    vsVersion: '16.0'
    logFileVerbosity: minimal
    configuration: Release
    platform: x64
    msbuildArgs: /p:GITHUB_RUN_NUMBER=$(Build.BuildId) /p:ContinuousIntegrationBuild=true

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (Core net461)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.Core\DurableTask.Core.csproj' 
    arguments: "-c Release -f net461"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (Core netstandard2.0)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.Core\DurableTask.Core.csproj' 
    arguments: "-c Release -f netstandard2.0"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (AzureStorage net461)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.AzureStorage\DurableTask.AzureStorage.csproj' 
    arguments: "-c Release -f net461"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (AzureStorage netstandard2.0)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.AzureStorage\DurableTask.AzureStorage.csproj' 
    arguments: "-c Release -f netstandard2.0"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (Emulator net461)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.Emulator\DurableTask.Emulator.csproj' 
    arguments: "-c Release -f net461"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (Emulator netstandard2.0)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\DurableTask.Emulator\DurableTask.Emulator.csproj' 
    arguments: "-c Release -f netstandard2.0"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (ServiceBus net461)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src/DurableTask.ServiceBus/DurableTask.ServiceBus.csproj' 
    arguments: "-c Release -f net461"
    zipAfterPublish: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish (ServiceBus netstandard2.0)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src/DurableTask.ServiceBus/DurableTask.ServiceBus.csproj' 
    arguments: "-c Release -f netstandard2.0"
    zipAfterPublish: false

# Manifest Generator Task
- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: 'Manifest Generator '
  inputs:
    BuildDropPath: '$(System.DefaultWorkingDirectory)'

# Authenticode sign all the DLLs with the Microsoft certificate.
# This appears to be an in-place signing job, which is convenient.
- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: 'ESRP CodeSigning: Authenticode'
  inputs:
    ConnectedServiceName: 'ESRP Service'
    FolderPath: 'src'
    Pattern: 'DurableTask.*.dll'
    signConfigType: inlineSignParams
    inlineOperation: |
     [    
        {
            "KeyCode": "CP-230012",
            "OperationCode": "SigntoolSign",
            "Parameters": {
                "OpusName": "Microsoft",
                "OpusInfo": "http://www.microsoft.com",
                "FileDigest": "/fd \"SHA256\"",
                "PageHash": "/NPH",
                "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName": "sign",
            "ToolVersion": "1.0"
          },
          {
              "KeyCode": "CP-230012",
              "OperationCode": "SigntoolVerify",
              "Parameters": {},
              "ToolName": "sign",
              "ToolVersion": "1.0"
          }
      ]

# Packaging needs to be a separate step from build.
# This will automatically pick up the signed DLLs.

- task: DotNetCoreCLI@2
  displayName: Generate nuget packages
  inputs:
    command: pack
    verbosityPack: Minimal
    configuration: Release
    nobuild: true
    packDirectory: $(build.artifactStagingDirectory)
    packagesToPack: 'src/DurableTask.AzureStorage/DurableTask.AzureStorage.sln'


- task: DotNetCoreCLI@2
  displayName: Generate nuget packages
  inputs:
    command: pack
    verbosityPack: Minimal
    configuration: Release
    nobuild: true
    packDirectory: $(build.artifactStagingDirectory)
    packagesToPack: 'src/DurableTask.Emulator/DurableTask.Emulator.csproj'

- task: DotNetCoreCLI@2
  displayName: Generate nuget packages
  inputs:
    command: pack
    verbosityPack: Minimal
    configuration: Release
    nobuild: true
    packDirectory: $(build.artifactStagingDirectory)
    packagesToPack: 'src/DurableTask.ServiceBus/DurableTask.ServiceBus.csproj'

- task: DotNetCoreCLI@2
  displayName: Generate nuget packages
  inputs:
    command: pack
    verbosityPack: Minimal
    configuration: Release
    nobuild: true
    packDirectory: $(build.artifactStagingDirectory)
    packagesToPack: 'src/DurableTask.AzureServiceFabric/DurableTask.AzureServiceFabric.csproj'
    buildProperties: 'Platform=x64'

# Digitally sign all the nuget packages with the Microsoft certificate.
# This appears to be an in-place signing job, which is convenient.
- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: 'ESRP CodeSigning: Nupkg'
  inputs:
    ConnectedServiceName: 'ESRP Service'
    FolderPath: $(build.artifactStagingDirectory)
    Pattern: '*.nupkg'
    signConfigType: inlineSignParams
    inlineOperation: |
     [    
        {
            "KeyCode": "CP-401405",
            "OperationCode": "NuGetSign",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
        },
        {
            "KeyCode": "CP-401405",
            "OperationCode": "NuGetVerify",
            "Parameters": {},
            "ToolName": "sign",
            "ToolVersion": "1.0"
        }
     ]

# Make the nuget packages available for download in the ADO portal UI
- publish: $(build.artifactStagingDirectory)
  displayName: 'Publish nuget packages to Artifacts'
  artifact: PackageOutput